if(is.null(fileSystem[[pathStr]])) fileSystem[[pathStr]] <- list(path=pathStr,dirs = character(), files=numeric(), size=0)
} else if(startsWith(command,'$ cd ')){
dir <- substring(command,first=6)
if(pathStr != '') fileSystem[[pathStr]]$dirs <- unique(c(fileSystem[[pathStr]]$dirs,dir))
path <- c(path,dir)
pathStr <- paste(path, collapse="_/_")
if(is.null(fileSystem[[pathStr]])) fileSystem[[pathStr]] <- list(path=pathStr,dirs = character(), files=numeric(), size=0)
} else if(startsWith(command,'dir')) {
dir <- substring(command,first=5)
fileSystem[[pathStr]]$dirs <- c(fileSystem[[pathStr]]$dirs,dir)
newDirPath <- paste(c(path,dir),collapse="_/_")
if(is.null(fileSystem[[newDirPath]])) fileSystem[[newDirPath]] <- list(path=newDirPath,dirs = character(), files=numeric(), size=0)
} else if(command != '$ ls'){
command <- unlist(strsplit(command,' '))
if(!command[2] %in% names(fileSystem[[pathStr]]$files)){
fileSystem[[pathStr]]$files[command[2]] <- as.numeric(command[1])
fileSystem[[pathStr]]$size <- fileSystem[[pathStr]]$size + as.numeric(command[1])
bubbleUp(path,as.numeric(command[1]))
}
}
print(pathStr)
invisible(readline(prompt="Press [enter] to continue"))
}
rm(list=ls());cat("\014");suppressWarnings(gc())
commands <- readLines('stolte/puzzle07.txt',warn=F)
fileSystem <- list()
path <- character()
pathStr <- ''
bubbleUp <- function(dir,size) {
if(length(dir) <= 1) return()
dir <- head(dir,-1)
tempPath <- paste(dir,collapse="_/_")
fileSystem[[tempPath]]$size <<- fileSystem[[tempPath]]$size + size
bubbleUp(dir,size)
}
i <- 1
N <- length(commands)
for(command in commands){
print(paste0(command,' | ',i,'/',N))
if(command == '$ cd ..'){
path <- head(path,-1)
pathStr <- paste(path,collapse="_/_")
} else if(command == '$ cd /'){
path <- c('/')
pathStr <- '/'
if(is.null(fileSystem[[pathStr]])) fileSystem[[pathStr]] <- list(path=pathStr,dirs = character(), files=numeric(), size=0)
} else if(startsWith(command,'$ cd ')){
dir <- substring(command,first=6)
if(pathStr != '') fileSystem[[pathStr]]$dirs <- unique(c(fileSystem[[pathStr]]$dirs,dir))
path <- c(path,dir)
pathStr <- paste(path, collapse="_/_")
if(is.null(fileSystem[[pathStr]])) fileSystem[[pathStr]] <- list(path=pathStr,dirs = character(), files=numeric(), size=0)
} else if(startsWith(command,'dir')) {
dir <- substring(command,first=5)
fileSystem[[pathStr]]$dirs <- c(fileSystem[[pathStr]]$dirs,dir)
newDirPath <- paste(c(path,dir),collapse="_/_")
if(is.null(fileSystem[[newDirPath]])) fileSystem[[newDirPath]] <- list(path=newDirPath,dirs = character(), files=numeric(), size=0)
} else if(command != '$ ls'){
command <- unlist(strsplit(command,' '))
if(!command[2] %in% names(fileSystem[[pathStr]]$files)){
fileSystem[[pathStr]]$files[command[2]] <- as.numeric(command[1])
fileSystem[[pathStr]]$size <- fileSystem[[pathStr]]$size + as.numeric(command[1])
bubbleUp(path,as.numeric(command[1]))
}
}
# print(pathStr)
i <- i + 1
# invisible(readline(prompt="Press [enter] to continue"))
}
part1Directories <- sapply(fileSystem, function(x) ifelse(x$size <= 10000,x$size,0))
part1Directories
part1Directories <- part1Directories[part1Directories > 0]
part1Directories
sum(part1Directories)
rm(list=ls());cat("\014");suppressWarnings(gc())
commands <- readLines('stolte/puzzle07-test.txt',warn=F)
fileSystem <- list()
path <- character()
pathStr <- ''
bubbleUp <- function(dir,size) {
if(length(dir) <= 1) return()
dir <- head(dir,-1)
tempPath <- paste(dir,collapse="_/_")
fileSystem[[tempPath]]$size <<- fileSystem[[tempPath]]$size + size
bubbleUp(dir,size)
}
i <- 1
N <- length(commands)
for(command in commands){
print(paste0(command,' | ',i,'/',N))
if(command == '$ cd ..'){
path <- head(path,-1)
pathStr <- paste(path,collapse="_/_")
} else if(command == '$ cd /'){
path <- c('/')
pathStr <- '/'
if(is.null(fileSystem[[pathStr]])) fileSystem[[pathStr]] <- list(path=pathStr,dirs = character(), files=numeric(), size=0)
} else if(startsWith(command,'$ cd ')){
dir <- substring(command,first=6)
if(pathStr != '') fileSystem[[pathStr]]$dirs <- unique(c(fileSystem[[pathStr]]$dirs,dir))
path <- c(path,dir)
pathStr <- paste(path, collapse="_/_")
if(is.null(fileSystem[[pathStr]])) fileSystem[[pathStr]] <- list(path=pathStr,dirs = character(), files=numeric(), size=0)
} else if(startsWith(command,'dir')) {
dir <- substring(command,first=5)
fileSystem[[pathStr]]$dirs <- c(fileSystem[[pathStr]]$dirs,dir)
newDirPath <- paste(c(path,dir),collapse="_/_")
if(is.null(fileSystem[[newDirPath]])) fileSystem[[newDirPath]] <- list(path=newDirPath,dirs = character(), files=numeric(), size=0)
} else if(command != '$ ls'){
command <- unlist(strsplit(command,' '))
if(!command[2] %in% names(fileSystem[[pathStr]]$files)){
fileSystem[[pathStr]]$files[command[2]] <- as.numeric(command[1])
fileSystem[[pathStr]]$size <- fileSystem[[pathStr]]$size + as.numeric(command[1])
bubbleUp(path,as.numeric(command[1]))
}
}
# print(pathStr)
i <- i + 1
# invisible(readline(prompt="Press [enter] to continue"))
}
part1Directories <- sapply(fileSystem, function(x) ifelse(x$size <= 10000,x$size,0))
sum(part1Directories)
part1Directories
fileSystem[[1]]
fileSystem[[2]]
fileSystem[[2]]$size <= 10000
fileSystem[[2]]$size
class(fileSystem[[2]]$size)
fileSystem[[2]]$size+1
fileSystem[[2]]$size > 100
fileSystem[[2]]$size < 100
fileSystem[[2]]$size < 10000
part1Directories <- sapply(fileSystem, function(x) ifelse(x$size <= 100000,x$size,0))
sum(part1Directories)
rm(list=ls());cat("\014");suppressWarnings(gc())
commands <- readLines('stolte/puzzle07.txt',warn=F)
fileSystem <- list()
path <- character()
pathStr <- ''
bubbleUp <- function(dir,size) {
if(length(dir) <= 1) return()
dir <- head(dir,-1)
tempPath <- paste(dir,collapse="_/_")
fileSystem[[tempPath]]$size <<- fileSystem[[tempPath]]$size + size
bubbleUp(dir,size)
}
i <- 1
N <- length(commands)
for(command in commands){
print(paste0(command,' | ',i,'/',N))
if(command == '$ cd ..'){
path <- head(path,-1)
pathStr <- paste(path,collapse="_/_")
} else if(command == '$ cd /'){
path <- c('/')
pathStr <- '/'
if(is.null(fileSystem[[pathStr]])) fileSystem[[pathStr]] <- list(path=pathStr,dirs = character(), files=numeric(), size=0)
} else if(startsWith(command,'$ cd ')){
dir <- substring(command,first=6)
if(pathStr != '') fileSystem[[pathStr]]$dirs <- unique(c(fileSystem[[pathStr]]$dirs,dir))
path <- c(path,dir)
pathStr <- paste(path, collapse="_/_")
if(is.null(fileSystem[[pathStr]])) fileSystem[[pathStr]] <- list(path=pathStr,dirs = character(), files=numeric(), size=0)
} else if(startsWith(command,'dir')) {
dir <- substring(command,first=5)
fileSystem[[pathStr]]$dirs <- c(fileSystem[[pathStr]]$dirs,dir)
newDirPath <- paste(c(path,dir),collapse="_/_")
if(is.null(fileSystem[[newDirPath]])) fileSystem[[newDirPath]] <- list(path=newDirPath,dirs = character(), files=numeric(), size=0)
} else if(command != '$ ls'){
command <- unlist(strsplit(command,' '))
if(!command[2] %in% names(fileSystem[[pathStr]]$files)){
fileSystem[[pathStr]]$files[command[2]] <- as.numeric(command[1])
fileSystem[[pathStr]]$size <- fileSystem[[pathStr]]$size + as.numeric(command[1])
bubbleUp(path,as.numeric(command[1]))
}
}
# print(pathStr)
i <- i + 1
# invisible(readline(prompt="Press [enter] to continue"))
}
part1Directories <- sapply(fileSystem, function(x) ifelse(x$size <= 100000,x$size,0))
sum(part1Directories)
total_disk_size <- 70000000
space_needed <- 30000000
used_space <- fileSystem[['/']]$size
total_disk_size <- 70000000
space_needed <- 30000000
used_space <- fileSystem[['/']]$size
min_space_to_delete <- space_needed - (total_disk_size - used_space)
total_disk_size
space_needed
used_space
min_space_to_delete
part2Directories <- sapply(fileSystem, function(x) ifelse(x$size >= min_space_to_delete,x$size,0))
min(part2Directories)
part2Directories <- sapply(fileSystem, function(x) ifelse(x$size >= min_space_to_delete,x$size,Inf))
min(part2Directories)
trees <- readLines('stolte/puzzle08.txt',warn=F)
trees <- t(sapply(trees,function(x) as.numeric(unlist(strsplit(x,split=""))),USE.NAMES = F))
width <- dim(trees)[1]
height <- dim(trees)[2]
findMax <- function(line, rev = F) {
N <- length(line)
if(rev) return(c(sapply(1:(N-1),function(i) max(line[(i+1):N])),-1))
c(-1,sapply(2:N,function(i) max(line[1:(i-1)])))
}
fromLeft <- t(sapply(1:width,function(i) findMax(trees[i,])))
fromRight <- t(sapply(1:width, function(i) findMax(trees[i,],rev = T)))
fromTop <- sapply(1:height,function(i) findMax(trees[,i]))
fromBottom <- sapply(1:height, function(i) findMax(trees[,i],rev = T))
counts <- matrix(nrow=height, ncol = width)
for(i in 1:width){
for(j in 1:height){
counts[j,i] <- sum(trees[j,i] > c(fromLeft[j,i],fromRight[j,i],fromTop[j,i],fromBottom[j,i]))
}
}
sum(counts >= 1)
findCumMax <- function(line, rev = F) {
N <- length(line)
if(rev){
return(c(sapply(1:(N-1),function(i){
view <- cummax(line[(i+1):N])
sum(line[i] > view)+!all(view < line[i]) # i.e. add one if it ran into something bigger or the edge
}),0))
}
c(0,sapply(2:N,function(i) {
view <- cummax(line[(i-1):1])
sum(line[i] > view)+!all(view < line[i]) # i.e. add one if it ran into something bigger or the edge
}))
}
lookingLeft <- t(sapply(1:width,function(i) findCumMax(trees[i,])))
lookingRight <- t(sapply(1:width, function(i) findCumMax(trees[i,],rev = T)))
lookingUp <- sapply(1:height,function(i) findCumMax(trees[,i]))
lookingDown <- sapply(1:height, function(i) findCumMax(trees[,i],rev = T))
counts2 <- matrix(nrow=height, ncol = width)
for(i in 1:width){
for(j in 1:height){
counts2[j,i] <- prod(c(lookingLeft[j,i],lookingRight[j,i],lookingUp[j,i],lookingDown[j,i]))
}
}
max(counts2)
setwd("C:/Users/mstoltej/REPOS/AOC")
data <- as.numeric(readLines('/2021/stolte/puzzle01.txt',warn=F))
data <- as.numeric(readLines('2021/stolte/puzzle01.txt',warn=F))
?shift
?lag
data <- as.numeric(readLines('2021/stolte/puzzle01.txt',warn=F))
shifted <- c(NA, head(data,-1))
sum(data > shifted)
sum(data > shifted, na.rm = T)
sum3 <- sapply(1:(length(data)-3), function(i) sum(data[i:(i+2)]))
199+227+229
sum3 <- sapply(1:(length(data)-3), function(i) sum(data[i:(i+2)]))
shifted <- c(NA, head(sum3,-1))
sum(sum3 > shifted, na.rm = T)
data <- c(199,200,208,210,200,207,240,269,260,263)
shifted <- c(NA, head(data,-1))
sum(data > shifted, na.rm = T)
sum3 <- sapply(1:(length(data)-3), function(i) sum(data[i:(i+2)]))
shifted <- c(NA, head(sum3,-1))
sum(sum3 > shifted, na.rm = T)
sum3
sum3 <- sapply(1:(length(data)-2), function(i) sum(data[i:(i+2)]))
shifted <- c(NA, head(sum3,-1))
sum(sum3 > shifted, na.rm = T)
data <- as.numeric(readLines('2021/stolte/puzzle01.txt',warn=F))
shifted <- c(NA, head(data,-1))
sum(data > shifted, na.rm = T)
sum3 <- sapply(1:(length(data)-2), function(i) sum(data[i:(i+2)]))
shifted <- c(NA, head(sum3,-1))
sum(sum3 > shifted, na.rm = T)
steps <- readLines('2022/stolte/puzzle09.txt',warn=F)
steps <- readLines('2022/stolte/puzzle09.txt',warn=F)
steps <- unlist(sapply(steps,function(s){
times <- as.numeric(substring(s,3))
return(rep(substring(s,1,1),times))
},USE.NAMES = F))
places <- list('1000010000'=T)
h <- c(10000,10000)
t <- c(10000,10000)
directions = list('R' = c(1,0), 'L' = c(-1,0), 'U' = c(0,1), 'D' = c(0,-1))
sqrt5 <- sqrt(5)
for(step in steps){
h <- h + directions[[step]]
dist <- sqrt((h[1]-t[1])^2+(h[2]-t[2])^2)
if(dist == 2){
t <- t + (h-t)/2
} else if(dist == sqrt5){
t <- t + c(abs(h[1]-t[1])/(h[1]-t[1]),abs(h[2]-t[2])/(h[2]-t[2]))
}
places[paste0(t[1],t[2])] <- T
# print(h)
# print(t)
# invisible(readline("[ENTER] to continue"))
}
length(places)
steps <- readLines('2022/stolte/puzzle09.txt',warn=F)
steps <- unlist(sapply(steps,function(s){
times <- as.numeric(substring(s,3))
return(rep(substring(s,1,1),times))
},USE.NAMES = F))
knots <- list(
'H' = c(10000,10000),
'1' = c(10000,10000)
# '2' = c(10000,10000),
# '3' = c(10000,10000),
# '4' = c(10000,10000),
# '5' = c(10000,10000),
# '6' = c(10000,10000),
# '7' = c(10000,10000),
# '8' = c(10000,10000),
# '9' = c(10000,10000)
)
lastKnot <- tail(names(knots),1)
directions = list('R' = c(1,0), 'L' = c(-1,0), 'U' = c(0,1), 'D' = c(0,-1))
sqrt5 <- sqrt(5)
sqrt8 <- sqrt(8)
for(step in steps){
knots[[1]] <- knots[[1]] + directions[[step]]
for(i in 2:length(knots)){
a <- names(knots)[i-1]
b <- names(knots)[i]
dist <- sqrt((knots[[a]][1]-knots[[b]][1])^2+(knots[[a]][2]-knots[[b]][2])^2)
if(dist == 2){
knots[[b]] <- knots[[b]] + (knots[[a]]-knots[[b]])/2
} else if(dist == sqrt5 | dist == sqrt8){
knots[[b]] <- knots[[b]] + c(abs(knots[[a]][1]-knots[[b]][1])/(knots[[a]][1]-knots[[b]][1]),abs(knots[[a]][2]-knots[[b]][2])/(knots[[a]][2]-knots[[b]][2]))
}
}
places[paste0(knots[['9']][1],knots[['9']][2])] <- T
# print(knots)
# invisible(readline("[ENTER] to continue"))
}
length(places)
steps <- readLines('2022/stolte/puzzle09.txt',warn=F)
steps <- unlist(sapply(steps,function(s){
times <- as.numeric(substring(s,3))
return(rep(substring(s,1,1),times))
},USE.NAMES = F))
places <- list('1000010000'=T)
knots <- list(
'H' = c(10000,10000),
'1' = c(10000,10000)
# '2' = c(10000,10000),
# '3' = c(10000,10000),
# '4' = c(10000,10000),
# '5' = c(10000,10000),
# '6' = c(10000,10000),
# '7' = c(10000,10000),
# '8' = c(10000,10000),
# '9' = c(10000,10000)
)
lastKnot <- tail(names(knots),1)
directions = list('R' = c(1,0), 'L' = c(-1,0), 'U' = c(0,1), 'D' = c(0,-1))
sqrt5 <- sqrt(5)
sqrt8 <- sqrt(8)
for(step in steps){
knots[[1]] <- knots[[1]] + directions[[step]]
for(i in 2:length(knots)){
a <- names(knots)[i-1]
b <- names(knots)[i]
dist <- sqrt((knots[[a]][1]-knots[[b]][1])^2+(knots[[a]][2]-knots[[b]][2])^2)
if(dist == 2){
knots[[b]] <- knots[[b]] + (knots[[a]]-knots[[b]])/2
} else if(dist == sqrt5 | dist == sqrt8){
knots[[b]] <- knots[[b]] + c(abs(knots[[a]][1]-knots[[b]][1])/(knots[[a]][1]-knots[[b]][1]),abs(knots[[a]][2]-knots[[b]][2])/(knots[[a]][2]-knots[[b]][2]))
}
}
places[paste0(knots[['9']][1],knots[['9']][2])] <- T
# print(knots)
# invisible(readline("[ENTER] to continue"))
}
length(places)
steps <- readLines('2022/stolte/puzzle09.txt',warn=F)
steps <- unlist(sapply(steps,function(s){
times <- as.numeric(substring(s,3))
return(rep(substring(s,1,1),times))
},USE.NAMES = F))
places <- list('1000010000'=T)
knots <- list(
'H' = c(10000,10000),
'1' = c(10000,10000)
# '2' = c(10000,10000),
# '3' = c(10000,10000),
# '4' = c(10000,10000),
# '5' = c(10000,10000),
# '6' = c(10000,10000),
# '7' = c(10000,10000),
# '8' = c(10000,10000),
# '9' = c(10000,10000)
)
lastKnot <- tail(names(knots),1)
directions = list('R' = c(1,0), 'L' = c(-1,0), 'U' = c(0,1), 'D' = c(0,-1))
sqrt5 <- sqrt(5)
sqrt8 <- sqrt(8)
for(step in steps){
knots[[1]] <- knots[[1]] + directions[[step]]
for(i in 2:length(knots)){
a <- names(knots)[i-1]
b <- names(knots)[i]
dist <- sqrt((knots[[a]][1]-knots[[b]][1])^2+(knots[[a]][2]-knots[[b]][2])^2)
if(dist == 2){
knots[[b]] <- knots[[b]] + (knots[[a]]-knots[[b]])/2
} else if(dist == sqrt5 | dist == sqrt8){
knots[[b]] <- knots[[b]] + c(abs(knots[[a]][1]-knots[[b]][1])/(knots[[a]][1]-knots[[b]][1]),abs(knots[[a]][2]-knots[[b]][2])/(knots[[a]][2]-knots[[b]][2]))
}
}
places[paste0(knots[[lastKnot]][1],knots[[lastKnot]][2])] <- T
# print(knots)
# invisible(readline("[ENTER] to continue"))
}
length(places)
rm(list=ls());cat("\014");suppressWarnings(gc())
commands <- readLines('stolte/puzzle07-kamren.txt',warn=F)
commands <- readLines('2022/stolte/puzzle07-kamren.txt',warn=F)
fileSystem <- list()
path <- character()
pathStr <- ''
bubbleUp <- function(dir,size) {
if(length(dir) <= 1) return()
dir <- head(dir,-1)
tempPath <- paste(dir,collapse="_/_")
fileSystem[[tempPath]]$size <<- fileSystem[[tempPath]]$size + size
bubbleUp(dir,size)
}
i <- 1
N <- length(commands)
for(command in commands){
print(paste0(command,' | ',i,'/',N))
if(command == '$ cd ..'){
path <- head(path,-1)
pathStr <- paste(path,collapse="_/_")
} else if(command == '$ cd /'){
path <- c('/')
pathStr <- '/'
if(is.null(fileSystem[[pathStr]])) fileSystem[[pathStr]] <- list(path=pathStr,dirs = character(), files=numeric(), size=0)
} else if(startsWith(command,'$ cd ')){
dir <- substring(command,first=6)
if(pathStr != '') fileSystem[[pathStr]]$dirs <- unique(c(fileSystem[[pathStr]]$dirs,dir))
path <- c(path,dir)
pathStr <- paste(path, collapse="_/_")
if(is.null(fileSystem[[pathStr]])) fileSystem[[pathStr]] <- list(path=pathStr,dirs = character(), files=numeric(), size=0)
} else if(startsWith(command,'dir')) {
dir <- substring(command,first=5)
fileSystem[[pathStr]]$dirs <- c(fileSystem[[pathStr]]$dirs,dir)
newDirPath <- paste(c(path,dir),collapse="_/_")
if(is.null(fileSystem[[newDirPath]])) fileSystem[[newDirPath]] <- list(path=newDirPath,dirs = character(), files=numeric(), size=0)
} else if(command != '$ ls'){
command <- unlist(strsplit(command,' '))
if(!command[2] %in% names(fileSystem[[pathStr]]$files)){
fileSystem[[pathStr]]$files[command[2]] <- as.numeric(command[1])
fileSystem[[pathStr]]$size <- fileSystem[[pathStr]]$size + as.numeric(command[1])
bubbleUp(path,as.numeric(command[1]))
}
}
# print(pathStr)
i <- i + 1
# invisible(readline(prompt="Press [enter] to continue"))
}
part1Directories <- sapply(fileSystem, function(x) ifelse(x$size <= 100000,x$size,0))
sum(part1Directories)
rm(list=ls());cat("\014");suppressWarnings(gc())
commands <- readLines('2022/stolte/puzzle07.txt',warn=F)
fileSystem <- list()
path <- character()
pathStr <- ''
bubbleUp <- function(dir,size) {
if(length(dir) <= 1) return()
dir <- head(dir,-1)
tempPath <- paste(dir,collapse="_/_")
fileSystem[[tempPath]]$size <<- fileSystem[[tempPath]]$size + size
bubbleUp(dir,size)
}
i <- 1
N <- length(commands)
for(command in commands){
print(paste0(command,' | ',i,'/',N))
if(command == '$ cd ..'){
path <- head(path,-1)
pathStr <- paste(path,collapse="_/_")
} else if(command == '$ cd /'){
path <- c('/')
pathStr <- '/'
if(is.null(fileSystem[[pathStr]])) fileSystem[[pathStr]] <- list(path=pathStr,dirs = character(), files=numeric(), size=0)
} else if(startsWith(command,'$ cd ')){
dir <- substring(command,first=6)
if(pathStr != '') fileSystem[[pathStr]]$dirs <- unique(c(fileSystem[[pathStr]]$dirs,dir))
path <- c(path,dir)
pathStr <- paste(path, collapse="_/_")
if(is.null(fileSystem[[pathStr]])) fileSystem[[pathStr]] <- list(path=pathStr,dirs = character(), files=numeric(), size=0)
} else if(startsWith(command,'dir')) {
dir <- substring(command,first=5)
fileSystem[[pathStr]]$dirs <- c(fileSystem[[pathStr]]$dirs,dir)
newDirPath <- paste(c(path,dir),collapse="_/_")
if(is.null(fileSystem[[newDirPath]])) fileSystem[[newDirPath]] <- list(path=newDirPath,dirs = character(), files=numeric(), size=0)
} else if(command != '$ ls'){
command <- unlist(strsplit(command,' '))
if(!command[2] %in% names(fileSystem[[pathStr]]$files)){
fileSystem[[pathStr]]$files[command[2]] <- as.numeric(command[1])
fileSystem[[pathStr]]$size <- fileSystem[[pathStr]]$size + as.numeric(command[1])
bubbleUp(path,as.numeric(command[1]))
}
}
# print(pathStr)
i <- i + 1
# invisible(readline(prompt="Press [enter] to continue"))
}
part1Directories <- sapply(fileSystem, function(x) ifelse(x$size <= 100000,x$size,0))
sum(part1Directories)
reticulate::repl_python()
from collections import defaultdict
n
